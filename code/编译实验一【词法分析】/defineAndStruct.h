#pragma once
#include<fstream>
#include<iostream>
#include <string>
using namespace std;

#define acc 100		 //分析成功
//算数表达式分析表
#define E 6			 //非终结符E


//bool表达式分析表
#define B 8			 //非终结符B
#define A 9			 //非终结符A
#define O 10			 //非终结符O
//程序语句分析表（slr）
#define S 11			 //非终结符S
#define L 12			 //非终结符L



#define suanshu 7	//算术表达式
#define buer 9	//布尔表达式

#define nOFkeepwords 7 //保留字数量

//保留字：
#define s_if 0
#define s_then 1
#define s_else 2
#define s_while 3
#define s_begin 4
#define s_do 5
#define s_end 6


#define biaoshifu  20  //标识符
#define changshu  21  //常数


#define underline 22  //下划线_
#define not 23		//!
#define and 24		//&&
#define or 25		//||

#define err 30		//错误标志

//运算符50~69
#define bigger 50   //    >
#define smaller 51 //    <
#define jia 52 //  +
#define jian 53 //  -
#define chen 54 //  *
#define chu 55 //  /
#define deng 56 //  =
#define dadeng 57 //  >=
#define xiaodeng 58 //  <=
#define budeng 59 //  !=
#define equal 60 //==

//界符70~80
#define douhao 70 //  ,
#define fenhao 71 //  ;
#define	dal 72 //  {
#define dar 73 //  }
#define xiaol 74 // ( 
#define xiaor 75 //  )
#define jinhao 76//#

struct ci{//词法分析识别的“词”
	int num;//种别编码
	int pos;//存储在表中的序号
	int zhongjie;
	int linecount;
};


struct keepwords{//保留字
	string name;//保留字符号
	int value;//种别编码
};

struct stackType{//分析栈
	int status;//状态栈
	ci danci;//符号栈
	int c;//语义栈
};

struct bb{//符号栈加语义栈的变形，用于表达式计算过程的输出
	int a;//数字
	string b;//+*（）等运算符号
};


struct fourexp{//四元式
	string op;//操作符号
	ci arg1;
	ci arg2;
	int result;
};
 
struct ntab33{
	int tc;
	int fc;
};

struct ll{
	int nxq1;
	int turec1; 
	int faultc1;
};




/*****************************************************************************
						算术表达式的SLR(1)分析表
 G[S']：	(0) S'->E
			(1) E->E+E
			(2) E->E*E
			(3) E->(E)
			(4) E->i
 *****************************************************************************/
static int action2[10][7] = {
	/*0*/	{  3, -1, -1,  2, -1, -1,  1},
	/*1*/	{ -1,  4,  5, -1, -1,acc, -1},
	/*2*/	{  3, -1, -1,  2, -1, -1,  6},
	/*3*/	{ -1,104,104, -1,104,104, -1},
	/*4*/	{  3, -1, -1,  2, -1, -1,  7},
	/*5*/	{  3, -1, -1,  2, -1, -1,  8},
	/*6*/	{ -1,  4,  5, -1,  9, -1, -1},
	/*7*/	{ -1,101,  5, -1,101,101, -1},
	/*8*/	{ -1,102,102, -1,102,102, -1},
	/*9*/	{ -1,103,103, -1,103,103, -1}
};
/*****************************************************************************
						布尔表达式的SLR分析表
 G[S']：	(0) S'->B
			(1) B->i
			(2) B->i rop i
			(3) B->(B)
			(4) B->not B
			(5) A->B and
			(6) B->AB
			(7) O->B or
			(8) B->OB
 *****************************************************************************/
static int action3[16][11] = {
	/*0*/	{  1, -1,  4, -1,  5, -1, -1, -1, 13,  7,  8},
	/*1*/	{ -1,  2, -1,101, -1,101,101,101, -1, -1, -1},
	/*2*/	{  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	/*3*/	{ -1, -1, -1,102, -1,102,102,102, -1, -1, -1},
	/*4*/	{  1, -1,  4, -1,  5, -1, -1, -1, 11,  7,  8},
	/*5*/	{  1, -1,  4, -1,  5, -1, -1, -1,  6,  7,  8},
	/*6*/	{ -1, -1, -1,104, -1,  9, 10,104, -1, -1, -1},
	/*7*/	{  1, -1,  4, -1,  5, -1, -1, -1, 14,  7,  8},
	/*8*/	{  1, -1,  4, -1,  5, -1, -1, -1, 15,  7,  8},
	/*9*/	{105, -1,105, -1,105, -1, -1, -1, -1, -1, -1},
	/*10*/	{107, -1,107, -1,107, -1, -1, -1, -1, -1, -1},
	/*11*/	{ -1, -1, -1, 12, -1,  9, 10, -1, -1, -1, -1},
	/*12*/	{ -1, -1, -1,103, -1,103,103,103, -1, -1, -1},
	/*13*/	{ -1, -1, -1, -1, -1,  9, 10,acc, -1, -1, -1},
	/*14*/	{ -1, -1, -1,106, -1,  9, 10,106, -1, -1, -1},
	/*15*/	{ -1, -1, -1,108, -1,  9, 10,108, -1, -1, -1}
};




/*****************************************************************************
						程序语句的SLR分析表
 G[S']：	(0) S'->S
			(1) S->if e then S else S
			(2) S->while e do S
			(3) S->begin L end
			(4) S->a
			(5) L->S
			(6) L->S;L
 *****************************************************************************/
static int action[19][13] = {
	/*0*/	{  2, -1, -1,  3,  4, -1, -1,  5, -1, -1, -1,  1, -1},
	/*1*/	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,acc, -1, -1},
	/*2*/	{ -1, -1, -1, -1, -1, -1, -1,  6, -1,  6, -1, -1, -1},
	/*3*/	{ -1, -1, -1, -1, -1, -1, -1, -1, -1,  7, -1, -1, -1},
	/*4*/	{  2, -1, -1,  3,  4, -1, -1,  5, -1, -1, -1,  9,  8},
	/*5*/	{ -1, -1,104, -1, -1, -1,104, -1,104, -1,104, -1, -1},
	/*6*/	{ -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	/*7*/	{ -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1},
	/*8*/	{ -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1},
	/*9*/	{ -1, -1, -1, -1, -1, -1,105, -1, 13, -1, -1, -1, -1},
	/*10*/	{  2, -1, -1,  3,  4, -1, -1,  5, -1, -1, -1, 14, -1},
	/*11*/	{  2, -1, -1,  3,  4, -1, -1,  5, -1, -1, -1, 15, -1},
	/*12*/	{ -1, -1,103, -1, -1, -1,103, -1,103, -1,103, -1, -1},
	/*13*/	{  2, -1, -1,  3,  4, -1, -1,  5, -1, -1, -1,  9, 16},
	/*14*/	{ -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	/*15*/	{ -1, -1,102, -1, -1, -1,102, -1,102, -1,102, -1, -1},
	/*16*/	{ -1, -1, -1, -1, -1, -1,106, -1, -1, -1, -1, -1, -1},
	/*17*/	{  2, -1, -1,  3,  4, -1, -1,  5, -1, -1, -1, 18, -1},
	/*18*/	{ -1, -1,101, -1, -1, -1,101, -1,101, -1,101, -1, -1},
};

//其他
static keepwords others[4] = { { "_", underline }, { "!", not }, { "&&", and }, { "||", or } };

//保留字：
static keepwords kw[nOFkeepwords] = { { "if", s_if }, { "then", s_then }, { "else", s_else }, { "while", s_while },
 {"begin",s_begin},{ "do", s_do } ,{"end",s_end}};

//运算符：
static keepwords yunsuan[11] = { { ">", bigger }, { "<", smaller }, { "+", jia }, { "-", jian }, { "*", chen },
{ "/", chu }, { "=", deng }, { ">=", dadeng }, { "<=", xiaodeng }, { "!=", budeng }, { "==", equal } };

//界符：
static keepwords border[7] = { { ",", douhao }, { ";", fenhao }, { "{", dal }, { "}", dar },
{ "(", xiaol }, { ")", xiaor }, { "#", jinhao } };

